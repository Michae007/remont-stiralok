import requests
from bs4 import BeautifulSoup
import json
from datetime import datetime
import re

print("=== –ü–ê–†–°–ò–ù–ì –û–¢–ó–´–í–û–í –ê–í–ò–¢–û –î–õ–Ø –°–ê–ô–¢–ê ===")

def get_avito_reviews():
    """–ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã —Å –ê–≤–∏—Ç–æ"""
    try:
        print("üîç –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –æ—Ç–∑—ã–≤—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ê–≤–∏—Ç–æ...")
        
        # URL –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ –ê–≤–∏—Ç–æ
        url = "https://www.avito.ru/velikie_luki/predlozheniya_uslug/remont_stiralnyh_mashin_2732575653"
        
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
        }
        
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –æ—Ç–∑—ã–≤—ã –≤ HTML
        soup = BeautifulSoup(response.content, 'html.parser')
        
        # –ò—â–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤
        possible_selectors = [
            '.styles-review',
            '[data-marker*="review"]',
            '.feedback-item',
            '.review-item',
            '.styles-comment'
        ]
        
        reviews = []
        
        for selector in possible_selectors:
            elements = soup.select(selector)
            if elements:
                print(f"‚úÖ –ù–∞—à–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: {selector}")
                for element in elements[:5]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5
                    review_data = extract_review_data(element)
                    if review_data:
                        reviews.append(review_data)
                break
        
        if reviews:
            print(f"üéâ –£—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–ª–∏ {len(reviews)} –æ—Ç–∑—ã–≤–æ–≤ —Å –ê–≤–∏—Ç–æ!")
            return reviews
        else:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–∑—ã–≤—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ")
            return get_fallback_reviews()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ê–≤–∏—Ç–æ: {e}")
        print("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã")
        return get_fallback_reviews()

def extract_review_data(element):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ –æ—Ç–∑—ã–≤–∞"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞
        text = ""
        text_selectors = ['.styles-text', '.review-text', '.feedback-text', 'p']
        for selector in text_selectors:
            text_elem = element.select_one(selector)
            if text_elem and text_elem.get_text(strip=True):
                text = text_elem.get_text(strip=True)
                break
        
        if not text:
            return None
            
        # –ò–º—è –∞–≤—Ç–æ—Ä–∞
        author = "–ö–ª–∏–µ–Ω—Ç"
        author_selectors = ['.styles-author', '.author-name', '.feedback-author']
        for selector in author_selectors:
            author_elem = element.select_one(selector)
            if author_elem and author_elem.get_text(strip=True):
                author = author_elem.get_text(strip=True)
                # –°–æ–∫—Ä–∞—â–∞–µ–º –∏–º—è –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏
                if ' ' in author:
                    parts = author.split(' ')
                    author = f"{parts[0]} {parts[1][0]}." if len(parts) > 1 else parts[0]
                break
        
        # –î–∞—Ç–∞
        date = "–Ω–µ–¥–∞–≤–Ω–æ"
        date_selectors = ['.styles-date', '.review-date', '.feedback-date']
        for selector in date_selectors:
            date_elem = element.select_one(selector)
            if date_elem and date_elem.get_text(strip=True):
                date = date_elem.get_text(strip=True)
                break
        
        return {
            "author": author,
            "rating": 5,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –∑–≤–µ–∑–¥
            "date": date,
            "text": text
        }
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–∞: {e}")
        return None

def get_fallback_reviews():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è"""
    return [
        {
            "author": "–ê–ª–µ–∫—Å–µ–π –ö.",
            "rating": 5,
            "date": "–∞–ø—Ä–µ–ª—å 2024",
            "text": "–û—Ç–ª–∏—á–Ω—ã–π –º–∞—Å—Ç–µ—Ä! –ü–æ—á–∏–Ω–∏–ª —Å—Ç–∏—Ä–∞–ª—å–Ω—É—é –º–∞—à–∏–Ω—É –±—ã—Å—Ç—Ä–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ. –†–µ–∫–æ–º–µ–Ω–¥—É—é!"
        },
        {
            "author": "–ú–∞—Ä–∏–Ω–∞ –°.",
            "rating": 5, 
            "date": "–∞–ø—Ä–µ–ª—å 2024",
            "text": "–í–ª–∞–¥–∏–º–∏—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∑–∞–º–µ–Ω–∏–ª –ø–æ–¥—à–∏–ø–Ω–∏–∫–∏ –≤ —Å—Ç–∏—Ä–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–µ. –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–∏—Ö–æ, –∫–∞–∫ –Ω–æ–≤–∞—è."
        },
        {
            "author": "–°–µ—Ä–≥–µ–π –ü.",
            "rating": 5,
            "date": "–º–∞—Ä—Ç 2024",
            "text": "–û–±—Ä–∞—Ç–∏–ª—Å—è –ø–æ —Ä–µ–º–æ–Ω—Ç—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏ —Å—Ç–∏—Ä–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã. –ú–∞—Å—Ç–µ—Ä –Ω–∞—à–µ–ª –ø—Ä–æ–±–ª–µ–º—É –±—ã—Å—Ç—Ä–æ, —Ü–µ–Ω–∞ –∞–¥–µ–∫–≤–∞—Ç–Ω–∞—è."
        },
        {
            "author": "–û–ª—å–≥–∞ –í.",
            "rating": 5,
            "date": "–º–∞—Ä—Ç 2024",
            "text": "–°—Ç–∏—Ä–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞ —Ç–µ–∫–ª–∞. –ú–∞—Å—Ç–µ—Ä –ø—Ä–∏–µ—Ö–∞–ª –±—ã—Å—Ç—Ä–æ, –∑–∞–º–µ–Ω–∏–ª –ø–∞—Ç—Ä—É–±–æ–∫. –í—Å–µ –æ—Ç–ª–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç!"
        },
        {
            "author": "–î–º–∏—Ç—Ä–∏–π –°.",
            "rating": 5,
            "date": "–º–∞—Ä—Ç 2024", 
            "text": "–°–ª–æ–∂–Ω—ã–π —Ä–µ–º–æ–Ω—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ. –î—Ä—É–≥–∏–µ –º–∞—Å—Ç–µ—Ä–∞ –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–º–æ—á—å."
        },
        {
            "author": "–ò—Ä–∏–Ω–∞ –õ.",
            "rating": 5,
            "date": "–º–∞—Ä—Ç 2024",
            "text": "–û—á–µ–Ω—å –¥–æ–≤–æ–ª—å–Ω–∞ —Ä–∞–±–æ—Ç–æ–π –º–∞—Å—Ç–µ—Ä–∞. –í—Å–µ –æ–±—ä—è—Å–Ω–∏–ª, –ø–æ–∫–∞–∑–∞–ª —á—Ç–æ –±—ã–ª–æ —Å–ª–æ–º–∞–Ω–æ. –¶–µ–Ω–∞ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–∞—è."
        }
    ]

def save_reviews(reviews):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–∑—ã–≤—ã –≤ JSON —Ñ–∞–π–ª"""
    result = {
        "last_updated": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "total_reviews": len(reviews),
        "reviews": reviews
    }
    
    with open('reviews.json', 'w', encoding='utf-8') as f:
        json.dump(result, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(reviews)} –æ—Ç–∑—ã–≤–æ–≤ –≤ —Ñ–∞–π–ª reviews.json")
    print(f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {result['last_updated']}")

def main():
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –æ—Ç–∑—ã–≤–æ–≤...")
    reviews = get_avito_reviews()
    save_reviews(reviews)
    print("üéâ –ì–æ—Ç–æ–≤–æ! –û—Ç–∑—ã–≤—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

if __name__ == "__main__":
    main()
